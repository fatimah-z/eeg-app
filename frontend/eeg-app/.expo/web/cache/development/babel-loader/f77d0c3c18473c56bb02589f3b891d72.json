{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { isLoggedIn, setAuthTokens, clearAuthTokens, getAccessToken, getRefreshToken } from \"react-native-axios-jwt\";\nimport { axiosInstance } from \"../utils/api\";\nexport var login = function _callee2(username, password, setSignedIn) {\n  var body;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          body = {\n            username: username,\n            password: password\n          };\n          axiosInstance.post(\"/users/login\", body).then(function (res) {\n            console.log(\"Response of login api:\", res);\n            setAuthTokens({\n              accessToken: response.data.token,\n              refreshToken: response.data.token\n            }).then(function () {\n              getAccessToken().then(function (token) {\n                console.log(\"ACCESS_TOKEN: \", token);\n                setSignedIn(true);\n              });\n            });\n          }).catch(function _callee(err) {\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    clearAuthTokens().then(function () {\n                      setAuthTokens({\n                        accessToken: \"testtoken\",\n                        refreshToken: \"testtoken\"\n                      });\n                      setSignedIn(true);\n                      Alert.alert(\"Wrong username and password!\");\n                    });\n\n                  case 1:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var logout = function logout(setSignedIn) {\n  setSignedIn(false);\n  clearAuthTokens();\n};\n\nif (isLoggedIn()) {}\n\nexport var accessToken = getAccessToken().then(function (accessToken) {\n  return console.log(accessToken);\n});\nexport var refreshToken = getRefreshToken().then(function (refreshToken) {\n  return console.log(refreshToken);\n});","map":{"version":3,"names":["isLoggedIn","setAuthTokens","clearAuthTokens","getAccessToken","getRefreshToken","axiosInstance","login","username","password","setSignedIn","body","post","then","res","console","log","accessToken","response","data","token","refreshToken","catch","err","Alert","alert","logout"],"sources":["C:/Users/Fatima/Documents/GitHub/eeg-app/frontend/eeg-app/auth/auth.js"],"sourcesContent":["import { Alert } from \"react-native\";\r\nimport {\r\n  isLoggedIn,\r\n  setAuthTokens,\r\n  clearAuthTokens,\r\n  getAccessToken,\r\n  getRefreshToken,\r\n} from \"react-native-axios-jwt\";\r\nimport { axiosInstance } from \"../utils/api\";\r\n\r\n// 4. Log in by POST-ing the email and password and get tokens in return\r\n// and call setAuthTokens with the result.\r\nexport const login = async (username, password, setSignedIn) => {\r\n  let body = { username, password };\r\n  axiosInstance\r\n    .post(\"/users/login\", body)\r\n    .then((res) => {\r\n      // SUCCESSFULL LOGIN\r\n      console.log(\"Response of login api:\", res);\r\n      setAuthTokens({\r\n        accessToken: response.data.token,\r\n        refreshToken: response.data.token,\r\n      }).then(() => {\r\n        getAccessToken().then((token) => {\r\n          console.log(\"ACCESS_TOKEN: \", token);\r\n\r\n          setSignedIn(true);\r\n        });\r\n      });\r\n    })\r\n    .catch(async (err) => {\r\n      //UNSUCCESSFULL LOGIN\r\n      clearAuthTokens().then(() => {\r\n        setAuthTokens({\r\n          accessToken: \"testtoken\",\r\n          refreshToken: \"testtoken\",\r\n        });\r\n        //should be false here doing true for testing only\r\n        // setSignedIn(false)\r\n        setSignedIn(true);\r\n\r\n        Alert.alert(\"Wrong username and password!\");\r\n      });\r\n    });\r\n  // save tokens to storage\r\n  // let response = { data: { access_token: username, refresh_token: password } };\r\n};\r\n\r\n// 5. Log out by clearing the auth tokens from AsyncStorage\r\nexport const logout = (setSignedIn) => {\r\n  setSignedIn(false);\r\n  clearAuthTokens();\r\n};\r\n\r\n// Check if refresh token exists\r\nif (isLoggedIn()) {\r\n  // assume we are logged in because we have a refresh token\r\n}\r\n\r\n// Get access to tokens\r\nexport const accessToken = getAccessToken().then((accessToken) =>\r\n  console.log(accessToken)\r\n);\r\nexport const refreshToken = getRefreshToken().then((refreshToken) =>\r\n  console.log(refreshToken)\r\n);\r\n"],"mappings":";;AACA,SACEA,UADF,EAEEC,aAFF,EAGEC,eAHF,EAIEC,cAJF,EAKEC,eALF,QAMO,wBANP;AAOA,SAASC,aAAT;AAIA,OAAO,IAAMC,KAAK,GAAG,kBAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,WAA3B;EAAA;EAAA;IAAA;MAAA;QAAA;UACfC,IADe,GACR;YAAEH,QAAQ,EAARA,QAAF;YAAYC,QAAQ,EAARA;UAAZ,CADQ;UAEnBH,aAAa,CACVM,IADH,CACQ,cADR,EACwBD,IADxB,EAEGE,IAFH,CAEQ,UAACC,GAAD,EAAS;YAEbC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,GAAtC;YACAZ,aAAa,CAAC;cACZe,WAAW,EAAEC,QAAQ,CAACC,IAAT,CAAcC,KADf;cAEZC,YAAY,EAAEH,QAAQ,CAACC,IAAT,CAAcC;YAFhB,CAAD,CAAb,CAGGP,IAHH,CAGQ,YAAM;cACZT,cAAc,GAAGS,IAAjB,CAAsB,UAACO,KAAD,EAAW;gBAC/BL,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BI,KAA9B;gBAEAV,WAAW,CAAC,IAAD,CAAX;cACD,CAJD;YAKD,CATD;UAUD,CAfH,EAgBGY,KAhBH,CAgBS,iBAAOC,GAAP;YAAA;cAAA;gBAAA;kBAAA;oBAELpB,eAAe,GAAGU,IAAlB,CAAuB,YAAM;sBAC3BX,aAAa,CAAC;wBACZe,WAAW,EAAE,WADD;wBAEZI,YAAY,EAAE;sBAFF,CAAD,CAAb;sBAMAX,WAAW,CAAC,IAAD,CAAX;sBAEAc,KAAK,CAACC,KAAN,CAAY,8BAAZ;oBACD,CAVD;;kBAFK;kBAAA;oBAAA;gBAAA;cAAA;YAAA;UAAA,CAhBT;;QAFmB;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CAAd;AAqCP,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAChB,WAAD,EAAiB;EACrCA,WAAW,CAAC,KAAD,CAAX;EACAP,eAAe;AAChB,CAHM;;AAMP,IAAIF,UAAU,EAAd,EAAkB,CAEjB;;AAGD,OAAO,IAAMgB,WAAW,GAAGb,cAAc,GAAGS,IAAjB,CAAsB,UAACI,WAAD;EAAA,OAC/CF,OAAO,CAACC,GAAR,CAAYC,WAAZ,CAD+C;AAAA,CAAtB,CAApB;AAGP,OAAO,IAAMI,YAAY,GAAGhB,eAAe,GAAGQ,IAAlB,CAAuB,UAACQ,YAAD;EAAA,OACjDN,OAAO,CAACC,GAAR,CAAYK,YAAZ,CADiD;AAAA,CAAvB,CAArB"},"metadata":{},"sourceType":"module"}